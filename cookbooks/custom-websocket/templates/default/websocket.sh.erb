#!/bin/bash
# Auto-generated by Chef; your changes will be overwritten!

# Pull in a full environment and include some configuration
source /etc/profile
for envfile in env env.websocket env.custom env.cloud
do
  source "/data/<%= @app %>/shared/config/${envfile}"
done

# This script should not be run as root, so let's check for that.
if [[ $(id -u) -eq 0 ]]
then
  echo "ERROR: This script must be run as a user, not as root." 1>&2
  exit 1
fi

ACTION="${1}"
PORT=<%= @port %>
pidfile="${pid_directory}/websocket.pid"
statefile="${pid_directory}/websocket.state"
controlfile="${pid_directory}/websocket.sock"

fetch_current_pid() {
  if [[ -s "${pidfile}" ]]
  then
    current_pid=$(cat "${pidfile}")
    process_count=$(ps -p ${current_pid} -o comm= | wc -w)
    if [[ "${process_count}" = "0" ]]
    then
      # Remove the pidfile if the process isn't actually running
      current_pid=0
      cleanup
    fi
  else
    # Try to check if the process is running. If found, provide missing pid file
    current_pid="$(ps auwwx | grep ".*[Pp]uma\.pid.*--port ${PORT}" | awk '{print $2}')"
    process_count=$(echo ${current_pid} | wc -w)
    if [[ "${process_count}" = "1" ]]
    then
      current_release_dir="$(readlink "${current_path}")"
      existing_proc_dir="$(readlink /proc/${current_pid}/cwd)"

      if [[ "${current_release_dir}" != "#{existing_proc_dir}" ]]
      then
        logger "Killing ${current_pid} because it is running from ${existing_proc_dir}, not ${current_release_dir}"
        # NOT a previously running copy of the app - kill it because it's squatting on the port
        kill -9 "${current_pid}"
        current_pid=0
        # TODO: Clean up associated files in the /var/run directory
      else
        echo "${current_pid}" > ${pidfile}
      fi
    else
      current_pid=0
    fi
  fi

  return 0
}

is_running() {
  fetch_current_pid
  if [[ ${current_pid} == 0 ]]
  then
    return 1
  fi

  if [[ -d "/proc/${current_pid}" ]]
  then
    application_name="${application}"
    process_name="$(readlink /proc/${current_pid}/exe)"
    process_dir="$((cat /proc/${current_pid}/environ; echo) | tr '\000' '\n' | grep '^PWD=' | sed -e 's/PWD=//')"
  fi

  return 0
}

cleanup() {
  if [[ -s "${pidfile}" ]]
  then
    echo "Cleaning up pid and socket files"
    rm ${pidfile}
    rm ${statefile}
    rm ${controlfile}
  fi

  return 0
}

status() {
  if is_running ; then
    echo "Websocket is running on port ${PORT} with:"
    echo "  pid: ${current_pid}"
    echo "  name: ${process_name}"
    echo "  cwd: ${process_dir}"
    cd ${current_path}
    pumactl -S ${statefile} stats
  else
    echo "Websocket is not running on port ${PORT}."
  fi
}

start() {
  if is_running ; then
    echo "ERROR: Websocket already running on port ${PORT} with: "
    echo "  pid: ${current_pid} "
    echo "  name: ${process_name} "
    echo "  cwd: ${process_dir}"
    exit 1
  fi

  if [ -d "${current_path}" ]; then
    if [ ! -z "${PORT}" ] ; then
      echo "Websocket is being started for ${application} port ${PORT} ..."
      cd ${current_path}

      # Don't need to use bundler because bundle_stubs is the first entry in the PATH
      nohup puma ${threads:+"-t $threads"} \
        --environment ${framework_env} \
        --state ${statefile} \
        --control unix://${controlfile} \
        --pidfile ${pidfile} \
        --port ${PORT} \
        --redirect-stdout ${log_directory}/websocket.stdout.log \
        --redirect-stderr ${log_directory}/websocket.stderr.log \
        ${puma_options} \
        ${shared_path}/config/websocket.ru &
      echo "verifying ..."
      sleep 4
      fetch_current_pid
      if [ "${current_pid}" = 0 ]; then
        echo "ERROR: Process did not seem to start"
        exit 1
      else
        echo " running on pid ${current_pid}."
      fi
    else
      echo "Usage: ${0} ${1} <port*>"
      echo "  * PORT environmental variable can also be used to specify the port"
      exit 1
    fi
  fi
}

deploy() {
    if is_running ; then
      echo "Hot deploying Websocket for ${application} on port ${PORT} (pid: ${current_pid}) ..."
      cd ${current_path}
      pumactl -S ${statefile} restart && echo " hot deploy in progress."
    else
      start
    fi
}

stop() {
  if is_running ; then
    echo "Stopping Websocket for ${application} on port ${PORT} (pid: ${current_pid}) ..."
    kill ${current_pid} && echo " stopped." && cleanup
  else
    echo "ERROR: Cannot find a running process for ${application} on port ${PORT}"
    exit 1
  fi
}

case "${ACTION}" in
  deploy)
    deploy
    ;;
  stop)
    stop
    ;;
  start)
    start
    ;;
  status)
    status
    ;;
  restart)
    deploy
    ;;
  *)
    echo "Usage: ${0} {start|stop|status|restart|deploy} [<port>]"
    exit 1
    ;;
esac

exit 0
